# -*- org-confirm-babel-evaluate: nil -*-
#+TITLE: Modern Python 3 Bootcamp Exercises
#+AUTHOR: Allen McPherson
#+EMAIL: al@losalamosal.me

Signed up for class with my son.

** Massive Section of Challenges

Blah.

#+begin_src emacs-lisp :results none
(setq org-babel-python-command "python3")
#+end_src

To execute: hit ^C^C with the point anywhere in this code.

*** reverse_string

#+BEGIN_SRC python :results output :exports both
'''
Write a function called reverse_string which accepts a string and returns a
new string with all the characters reversed.

reverse_string('awesome') # 'emosewa'
reverse_string('Colt') # 'tloC'
reverse_string('Elie') # 'eilE'
'''

# add whatever parameters you deem necessary - good luck!
def reverse_string(s):
    return s[::-1]

print(reverse_string('awesome'))
print(reverse_string('Colt'))
print(reverse_string('Elie'))

#+END_SRC

#+RESULTS:
: emosewa
: tloC
: eilE

*** list_check

#+BEGIN_SRC python :results output :exports both
'''
Write a function called list_check which accepts a list and returns True
if each value in the list is a list. Otherwise the function should return
false.

list_check([[],[1],[2,3], (1,2)]) # False
list_check([1, True, [],[1],[2,3]]) # False
list_check([[],[1],[2,3]]) # True
'''
from functools import reduce

def list_check(l):
    return reduce(lambda x,y: x and y, [type(x) is list for x in l])

print(list_check([[],[1],[2,3], (1,2)]))
print(list_check([1, True, [],[1],[2,3]]))
print(list_check([[],[1],[2,3]]))

#+END_SRC

#+RESULTS:
: False
: False
: True

*** remove_every_other

#+BEGIN_SRC python :results output :exports both
'''
Write a function called remove_every_other that accepts a list and
returns a new list with every second value removed.

remove_every_other([1,2,3,4,5]) # [1,3,5] 
remove_every_other([5,1,2,4,1]) # [5,2,1]
remove_every_other([1]) # [1]
'''

def remove_every_other(l):
    return l[::2]

print(remove_every_other([1,2,3,4,5]))
print(remove_every_other([5,1,2,4,1]))
print(remove_every_other([1]))

#+END_SRC

#+RESULTS:
: [1, 3, 5]
: [5, 2, 1]
: [1]

*** sum_pairs

#+BEGIN_SRC python :results output :exports both
'''
Write a function called sum_pairs that accepts a list and
a number and returns the first pair of numbers that sum to the
numbers passed.

sum_pairs([4,2,10,5,1], 6) # [4,2]
sum_pairs([11,20,4,2,1,5], 100) # []
'''

#  Only first correct solution returned (or empty list)
def sum_pairs(l, s):
    for i in range(0, len(l)-2):
        if l[i]+l[i+1] == s:
            return l[i:i+2]
    return []

print(sum_pairs([4,2,10,5,1], 6))
print(sum_pairs([11,20,4,2,1,5], 100))
#+END_SRC

#+RESULTS:
: [4, 2]
: []

