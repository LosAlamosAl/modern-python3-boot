# -*- org-confirm-babel-evaluate: nil -*-
#+TITLE: Modern Python 3 Bootcamp Exercises
#+AUTHOR: Allen McPherson
#+EMAIL: al@losalamosal.me

Signed up for class with my son.

** Massive Section of Challenges

Blah.

#+begin_src emacs-lisp :results none
(setq org-babel-python-command "python3")
#+end_src

To execute: hit ^C^C with the point anywhere in this code.

*** reverse_string

#+BEGIN_SRC python :results output :exports both
'''
Write a function called reverse_string which accepts a string and returns a
new string with all the characters reversed.

reverse_string('awesome') # 'emosewa'
reverse_string('Colt') # 'tloC'
reverse_string('Elie') # 'eilE'
'''

# add whatever parameters you deem necessary - good luck!
def reverse_string(s):
    return s[::-1]

print(reverse_string('awesome'))
print(reverse_string('Colt'))
print(reverse_string('Elie'))

#+END_SRC

#+RESULTS:
: emosewa
: tloC
: eilE

*** List_check

#+BEGIN_SRC python :results output :exports both
'''
Write a function called list_check which accepts a list and returns True
if each value in the list is a list. Otherwise the function should return
false.

list_check([[],[1],[2,3], (1,2)]) # False
list_check([1, True, [],[1],[2,3]]) # False
list_check([[],[1],[2,3]]) # True
'''
from functools import reduce

def list_check(l):
    return reduce(lambda x,y: x and y, [type(x) is list for x in l])

print(list_check([[],[1],[2,3], (1,2)]))
print(list_check([1, True, [],[1],[2,3]]))
print(list_check([[],[1],[2,3]]))

#+END_SRC

#+RESULTS:
: False
: False
: True

*** remove_every_other

#+BEGIN_SRC python :results output :exports both
'''
Write a function called remove_every_other that accepts a list and
returns a new list with every second value removed.

remove_every_other([1,2,3,4,5]) # [1,3,5] 
remove_every_other([5,1,2,4,1]) # [5,2,1]
remove_every_other([1]) # [1]
'''

def remove_every_other(l):
    return l[::2]

print(remove_every_other([1,2,3,4,5]))
print(remove_every_other([5,1,2,4,1]))
print(remove_every_other([1]))

#+END_SRC

#+RESULTS:
: [1, 3, 5]
: [5, 2, 1]
: [1]

*** sum_pairs

#+BEGIN_SRC python :results output :exports both
'''
Write a function called sum_pairs that accepts a list and
a number and returns the first pair of numbers that sum to the
numbers passed.

sum_pairs([4,2,10,5,1], 6) # [4,2]
sum_pairs([11,20,4,2,1,5], 100) # []
'''

#  Only first correct solution returned (or empty list)
def sum_pairs(l, s):
    for i in range(0, len(l)-2):
        if l[i]+l[i+1] == s:
            return l[i:i+2]
    return []

print(sum_pairs([4,2,10,5,1], 6))
print(sum_pairs([11,20,4,2,1,5], 100))
#+END_SRC

#+RESULTS:
: [4, 2]
: []

*** vowel_count

#+BEGIN_SRC python :results output :exports both
'''
Write a function called vowel_count that accepts a string and
returns a dictionary with the keys as the vowels and the values
as the count of times that vowel appears in string.

vowel_count('awesome') # {'a': 1, 'e': 2, 'o': 1}
vowel_count('Elie') # {'e': 2, 'i': 1}
vowel_count('Colt') # {'o': 1}
'''

def vowel_count(s):
    d = {}
    for v in "aeiou":
        c = s.count(v)
        if c != 0:
            d[v] = c
    return d

print(vowel_count('awesome'))
print(vowel_count('Elie'))
print(vowel_count('Colt'))
#+END_SRC

#+RESULTS:
: {'a': 1, 'e': 2, 'o': 1}
: {'e': 1, 'i': 1}
: {'o': 1}


*** titleize

#+BEGIN_SRC python :results output :exports both
'''
Write a function called titleize which accepts a string of words and
returns a new string with the first letter of every word in the
string capitalized.

titleize('this is awesome') # "This Is Awesome"
titleize('oNLy cAPITALIZe fIRSt') # "ONLy CAPITALIZe FIRSt"
'''

import re

def titleize(s):
    return re.sub("\\b[a-zA-Z]", lambda x: x.group().upper(), s)

print(titleize('this is awesome'))
print(titleize('oNLy cAPITALIZe fIRSt'))
#+END_SRC

#+RESULTS:
: This Is Awesome
: ONLy CAPITALIZe FIRSt

*** find_factors

#+BEGIN_SRC python :results output :exports both
'''
Write a function called find_factors which accepts a number and
returns a list of all the numbers, from 1 to the number passed is,
that evenly divide into the passed number.

find_factors(10) # [1,2,5,10 ]
find_factors(11) # [1,11]
find_factors(111) # [1,3,37,111 ]
find_factors(321421) # [1,293,1097,321421 ]
find_factors(412146) # [1,2,3,6,7,9,14,18,21,42,63,126,3271,6542,
    9813,19626,22897,29439,45794,58878,68691,137382,206073,412146]
'''
import math

def find_factors(n):
    return [i for i in range(1,n+1) if math.floor(n/i) * i == n]

print(find_factors(10))
print(find_factors(11))
print(find_factors(111))
print(find_factors(321421))
print(find_factors(412146))
#+END_SRC

#+RESULTS:
: [1, 2, 5, 10]
: [1, 11]
: [1, 3, 37, 111]
: [1, 293, 1097, 321421]
: [1, 2, 3, 6, 7, 9, 14, 18, 21, 42, 63, 126, 3271, 6542, 9813, 19626, 22897, 29439, 45794, 58878, 68691, 137382, 206073, 412146]

*** includes

#+BEGIN_SRC python :results output :exports both
'''
Write a function called includes which accepts a collection, a
value, and an optional starting index. The functionm should
return True if the value exists in the collection when we search
starting from the starting index. Otherwise, it should return False.

The collection can be a string, list, or dictionary. If the collection
if a string or array, the third parameter is a starting index for 
where to search from. If the collection is a dictionary, the function
searches for the value among values in the dictionary; since objects
have no sort order, the third parameter is ignored.

includes([1, 2, 3], 1) # True 
includes([1, 2, 3], 1, 2) # False 
includes({ 'a': 1, 'b': 2 }, 1) # True 
includes({ 'a': 1, 'b': 2 }, 'a') # False
includes('abcd', 'b') # True
includes('abcd', 'e') # False
'''
def includes(c, v, s=1):
    if isinstance(c, dict):
        l = list(c.values())
    else:
        l = c[s-1:]
    return v in l

print(includes([1, 2, 3], 1))
print(includes([1, 2, 3], 1, 2))
print(includes({ 'a': 1, 'b': 2 }, 1))
print(includes({ 'a': 1, 'b': 2 }, 'a'))
print(includes('abcd', 'b'))
print(includes('abcd', 'e'))
#+END_SRC

#+RESULTS:
: True
: False
: True
: False
: True
: False

*** repeat

#+BEGIN_SRC python :results output :exports both
'''
Write a function called repeat which accepts a string and returns
a new string with the string passed to the function repeated the
number amountvopf times. Do not use the built in repeat method!

repeat('*', 3) # '***' 
repeat('abc', 2) # 'abcabc' 
repeat('abc', 0) # ''
'''

# add whatever parameters you deem necessary - good luck!
def repeat(s, c):
    return ''.join([s for i in range(c)])

print(repeat('*', 3))
print(repeat('abc', 2))
print(repeat('abc', 0))
#+END_SRC

#+RESULTS:
: ***
: abcabc
: 

*** truncate

#+BEGIN_SRC python :results output :exports both
'''
Write a function called truncate that will shorten a string to
a specified length, and add "..." to the end. Given a string and
a number n, truncate the string to a shorter string containing
at most n characters. For example, truncate("long string", 5)
should return a 5-character truncated version of "long string".
If the string gets truncated, the truncated returned string should
have a "..." at the end. Because of this, the smallest number
passed in as the second argument should be 3.

truncate("Super cool", 2) # "Truncation must be at least 3 characters."
truncate("Super cool", 1) # "Truncation must be at least 3 characters."
truncate("Super cool", 0) # "Truncation must be at least 3 characters."
truncate("Hello World", 6) # "Hel..."
truncate("Problem solving is the best!", 10) # "Problem..."
truncate("Another test", 12) # "Another t..."
truncate("Woah", 4) # "W..."
truncate("Woah", 3) # "..."
truncate("Yo",100) # "Yo"
truncate("Holy guacamole!", 152) # "Holy guacamole!"
'''

# add whatever parameters you deem necessary - good luck!
def truncate(s, n):
    if n < 3: return "Truncation must be at least 3 characters."
    if len(s) < n: return s
    return s[:n-3] + '...'

print(truncate("Super cool", 2))
print(truncate("Super cool", 1))
print(truncate("Super cool", 0))
print(truncate("Hello World", 6))
print(truncate("Problem solving is the best!", 10))
print(truncate("Another test", 12))
print(truncate("Woah", 4))
print(truncate("Woah", 3))
print(truncate("Yo",100))
print(truncate("Holy guacamole!", 152))
#+END_SRC

#+RESULTS:
#+begin_example
Truncation must be at least 3 characters.
Truncation must be at least 3 characters.
Truncation must be at least 3 characters.
Hel...
Problem...
Another t...
W...
...
Yo
Holy guacamole!
#+end_example
